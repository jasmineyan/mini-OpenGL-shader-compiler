Terminals unused in grammar

   '|'
   '&'


Rules useless in parser due to conflicts

   10 declaration: %empty

   54 binary_op: AND
   55          | OR
   56          | EQ
   57          | NEQ
   58          | '<'
   59          | LEQ
   60          | '>'
   61          | GEQ

   69 function_name: FUNC


State 4 conflicts: 8 shift/reduce, 6 reduce/reduce
State 37 conflicts: 1 reduce/reduce
State 40 conflicts: 13 shift/reduce
State 41 conflicts: 13 shift/reduce
State 55 conflicts: 3 shift/reduce
State 56 conflicts: 3 shift/reduce
State 59 conflicts: 15 shift/reduce
State 60 conflicts: 15 shift/reduce
State 61 conflicts: 13 shift/reduce
State 62 conflicts: 15 shift/reduce
State 63 conflicts: 13 shift/reduce
State 64 conflicts: 13 shift/reduce
State 65 conflicts: 13 shift/reduce
State 66 conflicts: 13 shift/reduce
State 67 conflicts: 13 shift/reduce
State 68 conflicts: 13 shift/reduce
State 69 conflicts: 13 shift/reduce
State 70 conflicts: 13 shift/reduce
State 71 conflicts: 13 shift/reduce
State 74 conflicts: 13 shift/reduce
State 84 conflicts: 13 shift/reduce
State 85 conflicts: 13 shift/reduce
State 86 conflicts: 3 shift/reduce
State 87 conflicts: 13 shift/reduce
State 88 conflicts: 3 shift/reduce
State 89 conflicts: 3 shift/reduce
State 90 conflicts: 3 shift/reduce
State 91 conflicts: 3 shift/reduce
State 92 conflicts: 3 shift/reduce
State 93 conflicts: 3 shift/reduce
State 94 conflicts: 3 shift/reduce
State 95 conflicts: 3 shift/reduce
State 96 conflicts: 3 shift/reduce
State 97 conflicts: 1 shift/reduce
State 98 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: scope

    2 scope: '{' declarations statements '}'

    3 declarations: declarations declaration
    4             | %empty

    5 statements: statements statement
    6           | %empty

    7 declaration: type ID ';'
    8            | type ID '=' expression ';'
    9            | CONST type ID '=' expression ';'
   10            | %empty

   11 statement: variable '=' expression ';'
   12          | IF '(' expression ')' statement else_statement
   13          | WHILE '(' expression ')' statement
   14          | scope
   15          | ';'

   16 else_statement: ELSE statement
   17               | %empty

   18 type: INT_T
   19     | IVEC_T
   20     | BOOL_T
   21     | BVEC_T
   22     | FLOAT_T
   23     | VEC_T
   24     | FUNC

   25 expression: constructor
   26           | function
   27           | INT_C
   28           | FLOAT_C
   29           | variable
   30           | unary_op expression
   31           | expression binary_op expression
   32           | TRUE_C
   33           | FALSE_C
   34           | '(' expression ')'
   35           | '!' expression
   36           | '-' expression
   37           | expression AND expression
   38           | expression OR expression
   39           | expression EQ expression
   40           | expression NEQ expression
   41           | expression '<' expression
   42           | expression LEQ expression
   43           | expression '>' expression
   44           | expression GEQ expression
   45           | expression '+' expression
   46           | expression '-' expression
   47           | expression '*' expression
   48           | expression '/' expression
   49           | expression '^' expression

   50 variable: ID
   51         | ID '[' INT_C ']'

   52 unary_op: '!'
   53         | '-'

   54 binary_op: AND
   55          | OR
   56          | EQ
   57          | NEQ
   58          | '<'
   59          | LEQ
   60          | '>'
   61          | GEQ
   62          | '+'
   63          | '-'
   64          | '*'
   65          | '/'
   66          | '^'

   67 constructor: type '(' arguments ')'

   68 function: function_name '(' arguments_opt ')'

   69 function_name: FUNC

   70 arguments_opt: arguments
   71              | %empty

   72 arguments: arguments ',' expression
   73          | expression


Terminals, with rules where they appear

$end (0) 0
'!' (33) 35 52
'&' (38)
'(' (40) 12 13 34 67 68
')' (41) 12 13 34 67 68
'*' (42) 47 64
'+' (43) 45 62
',' (44) 72
'-' (45) 36 46 53 63
'/' (47) 48 65
';' (59) 7 8 9 11 15
'<' (60) 41 58
'=' (61) 8 9 11
'>' (62) 43 60
'[' (91) 51
']' (93) 51
'^' (94) 49 66
'{' (123) 2
'|' (124)
'}' (125) 2
error (256)
FLOAT_T (258) 22
INT_T (259) 18
BOOL_T (260) 20
CONST (261) 9
FALSE_C (262) 33
TRUE_C (263) 32
FUNC (264) 24 69
IF (265) 12
WHILE (266) 13
ELSE (267) 16
AND (268) 37 54
OR (269) 38 55
NEQ (270) 40 57
EQ (271) 39 56
LEQ (272) 42 59
GEQ (273) 44 61
VEC_T (274) 23
BVEC_T (275) 21
IVEC_T (276) 19
FLOAT_C (277) 28
INT_C (278) 27 51
ID (279) 7 8 9 50 51
UMINUS (280)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
scope (47)
    on left: 2, on right: 1 14
declarations (48)
    on left: 3 4, on right: 2 3
statements (49)
    on left: 5 6, on right: 2 5
declaration (50)
    on left: 7 8 9 10, on right: 3
statement (51)
    on left: 11 12 13 14 15, on right: 5 12 13 16
else_statement (52)
    on left: 16 17, on right: 12
type (53)
    on left: 18 19 20 21 22 23 24, on right: 7 8 9 67
expression (54)
    on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
    43 44 45 46 47 48 49, on right: 8 9 11 12 13 30 31 34 35 36 37
    38 39 40 41 42 43 44 45 46 47 48 49 72 73
variable (55)
    on left: 50 51, on right: 11 29
unary_op (56)
    on left: 52 53, on right: 30
binary_op (57)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66, on right: 31
constructor (58)
    on left: 67, on right: 25
function (59)
    on left: 68, on right: 26
function_name (60)
    on left: 69, on right: 68
arguments_opt (61)
    on left: 70 71, on right: 68
arguments (62)
    on left: 72 73, on right: 67 70 72


State 0

    0 $accept: . program $end

    '{'  shift, and go to state 1

    program  go to state 2
    scope    go to state 3


State 1

    2 scope: '{' . declarations statements '}'

    $default  reduce using rule 4 (declarations)

    declarations  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: scope .

    $default  reduce using rule 1 (program)


State 4

    2 scope: '{' declarations . statements '}'
    3 declarations: declarations . declaration

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    CONST    shift, and go to state 9
    FUNC     shift, and go to state 10
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13

    FLOAT_T   [reduce using rule 10 (declaration)]
    INT_T     [reduce using rule 10 (declaration)]
    BOOL_T    [reduce using rule 10 (declaration)]
    CONST     [reduce using rule 10 (declaration)]
    FUNC      [reduce using rule 10 (declaration)]
    IF        reduce using rule 6 (statements)
    IF        [reduce using rule 10 (declaration)]
    WHILE     reduce using rule 6 (statements)
    WHILE     [reduce using rule 10 (declaration)]
    VEC_T     [reduce using rule 10 (declaration)]
    BVEC_T    [reduce using rule 10 (declaration)]
    IVEC_T    [reduce using rule 10 (declaration)]
    ID        reduce using rule 6 (statements)
    ID        [reduce using rule 10 (declaration)]
    '{'       reduce using rule 6 (statements)
    '{'       [reduce using rule 10 (declaration)]
    '}'       reduce using rule 6 (statements)
    '}'       [reduce using rule 10 (declaration)]
    ';'       reduce using rule 6 (statements)
    ';'       [reduce using rule 10 (declaration)]
    $default  reduce using rule 6 (statements)

    statements   go to state 14
    declaration  go to state 15
    type         go to state 16


State 5

    0 $accept: program $end .

    $default  accept


State 6

   22 type: FLOAT_T .

    $default  reduce using rule 22 (type)


State 7

   18 type: INT_T .

    $default  reduce using rule 18 (type)


State 8

   20 type: BOOL_T .

    $default  reduce using rule 20 (type)


State 9

    9 declaration: CONST . type ID '=' expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FUNC     shift, and go to state 10
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13

    type  go to state 17


State 10

   24 type: FUNC .

    $default  reduce using rule 24 (type)


State 11

   23 type: VEC_T .

    $default  reduce using rule 23 (type)


State 12

   21 type: BVEC_T .

    $default  reduce using rule 21 (type)


State 13

   19 type: IVEC_T .

    $default  reduce using rule 19 (type)


State 14

    2 scope: '{' declarations statements . '}'
    5 statements: statements . statement

    IF     shift, and go to state 18
    WHILE  shift, and go to state 19
    ID     shift, and go to state 20
    '{'    shift, and go to state 1
    '}'    shift, and go to state 21
    ';'    shift, and go to state 22

    scope      go to state 23
    statement  go to state 24
    variable   go to state 25


State 15

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


State 16

    7 declaration: type . ID ';'
    8            | type . ID '=' expression ';'

    ID  shift, and go to state 26


State 17

    9 declaration: CONST type . ID '=' expression ';'

    ID  shift, and go to state 27


State 18

   12 statement: IF . '(' expression ')' statement else_statement

    '('  shift, and go to state 28


State 19

   13 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 29


State 20

   50 variable: ID .
   51         | ID . '[' INT_C ']'

    '['  shift, and go to state 30

    $default  reduce using rule 50 (variable)


State 21

    2 scope: '{' declarations statements '}' .

    $default  reduce using rule 2 (scope)


State 22

   15 statement: ';' .

    $default  reduce using rule 15 (statement)


State 23

   14 statement: scope .

    $default  reduce using rule 14 (statement)


State 24

    5 statements: statements statement .

    $default  reduce using rule 5 (statements)


State 25

   11 statement: variable . '=' expression ';'

    '='  shift, and go to state 31


State 26

    7 declaration: type ID . ';'
    8            | type ID . '=' expression ';'

    '='  shift, and go to state 32
    ';'  shift, and go to state 33


State 27

    9 declaration: CONST type ID . '=' expression ';'

    '='  shift, and go to state 34


State 28

   12 statement: IF '(' . expression ')' statement else_statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 44
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 29

   13 statement: WHILE '(' . expression ')' statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 50
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 30

   51 variable: ID '[' . INT_C ']'

    INT_C  shift, and go to state 51


State 31

   11 statement: variable '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 52
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 32

    8 declaration: type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 53
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 33

    7 declaration: type ID ';' .

    $default  reduce using rule 7 (declaration)


State 34

    9 declaration: CONST type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 54
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 35

   33 expression: FALSE_C .

    $default  reduce using rule 33 (expression)


State 36

   32 expression: TRUE_C .

    $default  reduce using rule 32 (expression)


State 37

   24 type: FUNC .
   69 function_name: FUNC .

    '('       reduce using rule 24 (type)
    '('       [reduce using rule 69 (function_name)]
    $default  reduce using rule 24 (type)


State 38

   28 expression: FLOAT_C .

    $default  reduce using rule 28 (expression)


State 39

   27 expression: INT_C .

    $default  reduce using rule 27 (expression)


State 40

   36 expression: '-' . expression
   53 unary_op: '-' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T   [reduce using rule 53 (unary_op)]
    INT_T     [reduce using rule 53 (unary_op)]
    BOOL_T    [reduce using rule 53 (unary_op)]
    FALSE_C   [reduce using rule 53 (unary_op)]
    TRUE_C    [reduce using rule 53 (unary_op)]
    FUNC      [reduce using rule 53 (unary_op)]
    VEC_T     [reduce using rule 53 (unary_op)]
    BVEC_T    [reduce using rule 53 (unary_op)]
    IVEC_T    [reduce using rule 53 (unary_op)]
    FLOAT_C   [reduce using rule 53 (unary_op)]
    INT_C     [reduce using rule 53 (unary_op)]
    ID        [reduce using rule 53 (unary_op)]
    '('       [reduce using rule 53 (unary_op)]
    $default  reduce using rule 53 (unary_op)

    type           go to state 43
    expression     go to state 55
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 41

   35 expression: '!' . expression
   52 unary_op: '!' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '('      shift, and go to state 42

    '!'  error (nonassociative)

    FLOAT_T   [reduce using rule 52 (unary_op)]
    INT_T     [reduce using rule 52 (unary_op)]
    BOOL_T    [reduce using rule 52 (unary_op)]
    FALSE_C   [reduce using rule 52 (unary_op)]
    TRUE_C    [reduce using rule 52 (unary_op)]
    FUNC      [reduce using rule 52 (unary_op)]
    VEC_T     [reduce using rule 52 (unary_op)]
    BVEC_T    [reduce using rule 52 (unary_op)]
    IVEC_T    [reduce using rule 52 (unary_op)]
    FLOAT_C   [reduce using rule 52 (unary_op)]
    INT_C     [reduce using rule 52 (unary_op)]
    ID        [reduce using rule 52 (unary_op)]
    '('       [reduce using rule 52 (unary_op)]
    $default  reduce using rule 52 (unary_op)

    type           go to state 43
    expression     go to state 56
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 42

   34 expression: '(' . expression ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 57
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 43

   67 constructor: type . '(' arguments ')'

    '('  shift, and go to state 58


State 44

   12 statement: IF '(' expression . ')' statement else_statement
   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71
    ')'  shift, and go to state 72

    binary_op  go to state 73


State 45

   29 expression: variable .

    $default  reduce using rule 29 (expression)


State 46

   30 expression: unary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 74
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 47

   25 expression: constructor .

    $default  reduce using rule 25 (expression)


State 48

   26 expression: function .

    $default  reduce using rule 26 (expression)


State 49

   68 function: function_name . '(' arguments_opt ')'

    '('  shift, and go to state 75


State 50

   13 statement: WHILE '(' expression . ')' statement
   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71
    ')'  shift, and go to state 76

    binary_op  go to state 73


State 51

   51 variable: ID '[' INT_C . ']'

    ']'  shift, and go to state 77


State 52

   11 statement: variable '=' expression . ';'
   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71
    ';'  shift, and go to state 78

    binary_op  go to state 73


State 53

    8 declaration: type ID '=' expression . ';'
   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71
    ';'  shift, and go to state 79

    binary_op  go to state 73


State 54

    9 declaration: CONST type ID '=' expression . ';'
   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71
    ';'  shift, and go to state 80

    binary_op  go to state 73


State 55

   31 expression: expression . binary_op expression
   36           | '-' expression .
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62

    AND       [reduce using rule 36 (expression)]
    OR        [reduce using rule 36 (expression)]
    EQ        [reduce using rule 36 (expression)]
    $default  reduce using rule 36 (expression)

    binary_op  go to state 73


State 56

   31 expression: expression . binary_op expression
   35           | '!' expression .
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62

    AND       [reduce using rule 35 (expression)]
    OR        [reduce using rule 35 (expression)]
    EQ        [reduce using rule 35 (expression)]
    $default  reduce using rule 35 (expression)

    binary_op  go to state 73


State 57

   31 expression: expression . binary_op expression
   34           | '(' expression . ')'
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71
    ')'  shift, and go to state 81

    binary_op  go to state 73


State 58

   67 constructor: type '(' . arguments ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 82
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49
    arguments      go to state 83


State 59

   37 expression: expression AND . expression
   54 binary_op: AND .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 54 (binary_op)]
    INT_T    [reduce using rule 54 (binary_op)]
    BOOL_T   [reduce using rule 54 (binary_op)]
    FALSE_C  [reduce using rule 54 (binary_op)]
    TRUE_C   [reduce using rule 54 (binary_op)]
    FUNC     [reduce using rule 54 (binary_op)]
    VEC_T    [reduce using rule 54 (binary_op)]
    BVEC_T   [reduce using rule 54 (binary_op)]
    IVEC_T   [reduce using rule 54 (binary_op)]
    FLOAT_C  [reduce using rule 54 (binary_op)]
    INT_C    [reduce using rule 54 (binary_op)]
    ID       [reduce using rule 54 (binary_op)]
    '-'      [reduce using rule 54 (binary_op)]
    '!'      [reduce using rule 54 (binary_op)]
    '('      [reduce using rule 54 (binary_op)]

    type           go to state 43
    expression     go to state 84
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 60

   38 expression: expression OR . expression
   55 binary_op: OR .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 55 (binary_op)]
    INT_T    [reduce using rule 55 (binary_op)]
    BOOL_T   [reduce using rule 55 (binary_op)]
    FALSE_C  [reduce using rule 55 (binary_op)]
    TRUE_C   [reduce using rule 55 (binary_op)]
    FUNC     [reduce using rule 55 (binary_op)]
    VEC_T    [reduce using rule 55 (binary_op)]
    BVEC_T   [reduce using rule 55 (binary_op)]
    IVEC_T   [reduce using rule 55 (binary_op)]
    FLOAT_C  [reduce using rule 55 (binary_op)]
    INT_C    [reduce using rule 55 (binary_op)]
    ID       [reduce using rule 55 (binary_op)]
    '-'      [reduce using rule 55 (binary_op)]
    '!'      [reduce using rule 55 (binary_op)]
    '('      [reduce using rule 55 (binary_op)]

    type           go to state 43
    expression     go to state 85
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 61

   40 expression: expression NEQ . expression
   57 binary_op: NEQ .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 57 (binary_op)]
    INT_T    [reduce using rule 57 (binary_op)]
    BOOL_T   [reduce using rule 57 (binary_op)]
    FALSE_C  [reduce using rule 57 (binary_op)]
    TRUE_C   [reduce using rule 57 (binary_op)]
    FUNC     [reduce using rule 57 (binary_op)]
    VEC_T    [reduce using rule 57 (binary_op)]
    BVEC_T   [reduce using rule 57 (binary_op)]
    IVEC_T   [reduce using rule 57 (binary_op)]
    FLOAT_C  [reduce using rule 57 (binary_op)]
    INT_C    [reduce using rule 57 (binary_op)]
    ID       [reduce using rule 57 (binary_op)]
    '('      [reduce using rule 57 (binary_op)]

    type           go to state 43
    expression     go to state 86
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 62

   39 expression: expression EQ . expression
   56 binary_op: EQ .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 56 (binary_op)]
    INT_T    [reduce using rule 56 (binary_op)]
    BOOL_T   [reduce using rule 56 (binary_op)]
    FALSE_C  [reduce using rule 56 (binary_op)]
    TRUE_C   [reduce using rule 56 (binary_op)]
    FUNC     [reduce using rule 56 (binary_op)]
    VEC_T    [reduce using rule 56 (binary_op)]
    BVEC_T   [reduce using rule 56 (binary_op)]
    IVEC_T   [reduce using rule 56 (binary_op)]
    FLOAT_C  [reduce using rule 56 (binary_op)]
    INT_C    [reduce using rule 56 (binary_op)]
    ID       [reduce using rule 56 (binary_op)]
    '-'      [reduce using rule 56 (binary_op)]
    '!'      [reduce using rule 56 (binary_op)]
    '('      [reduce using rule 56 (binary_op)]

    type           go to state 43
    expression     go to state 87
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 63

   42 expression: expression LEQ . expression
   59 binary_op: LEQ .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 59 (binary_op)]
    INT_T    [reduce using rule 59 (binary_op)]
    BOOL_T   [reduce using rule 59 (binary_op)]
    FALSE_C  [reduce using rule 59 (binary_op)]
    TRUE_C   [reduce using rule 59 (binary_op)]
    FUNC     [reduce using rule 59 (binary_op)]
    VEC_T    [reduce using rule 59 (binary_op)]
    BVEC_T   [reduce using rule 59 (binary_op)]
    IVEC_T   [reduce using rule 59 (binary_op)]
    FLOAT_C  [reduce using rule 59 (binary_op)]
    INT_C    [reduce using rule 59 (binary_op)]
    ID       [reduce using rule 59 (binary_op)]
    '('      [reduce using rule 59 (binary_op)]

    type           go to state 43
    expression     go to state 88
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 64

   44 expression: expression GEQ . expression
   61 binary_op: GEQ .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 61 (binary_op)]
    INT_T    [reduce using rule 61 (binary_op)]
    BOOL_T   [reduce using rule 61 (binary_op)]
    FALSE_C  [reduce using rule 61 (binary_op)]
    TRUE_C   [reduce using rule 61 (binary_op)]
    FUNC     [reduce using rule 61 (binary_op)]
    VEC_T    [reduce using rule 61 (binary_op)]
    BVEC_T   [reduce using rule 61 (binary_op)]
    IVEC_T   [reduce using rule 61 (binary_op)]
    FLOAT_C  [reduce using rule 61 (binary_op)]
    INT_C    [reduce using rule 61 (binary_op)]
    ID       [reduce using rule 61 (binary_op)]
    '('      [reduce using rule 61 (binary_op)]

    type           go to state 43
    expression     go to state 89
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 65

   41 expression: expression '<' . expression
   58 binary_op: '<' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 58 (binary_op)]
    INT_T    [reduce using rule 58 (binary_op)]
    BOOL_T   [reduce using rule 58 (binary_op)]
    FALSE_C  [reduce using rule 58 (binary_op)]
    TRUE_C   [reduce using rule 58 (binary_op)]
    FUNC     [reduce using rule 58 (binary_op)]
    VEC_T    [reduce using rule 58 (binary_op)]
    BVEC_T   [reduce using rule 58 (binary_op)]
    IVEC_T   [reduce using rule 58 (binary_op)]
    FLOAT_C  [reduce using rule 58 (binary_op)]
    INT_C    [reduce using rule 58 (binary_op)]
    ID       [reduce using rule 58 (binary_op)]
    '('      [reduce using rule 58 (binary_op)]

    type           go to state 43
    expression     go to state 90
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 66

   43 expression: expression '>' . expression
   60 binary_op: '>' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T  [reduce using rule 60 (binary_op)]
    INT_T    [reduce using rule 60 (binary_op)]
    BOOL_T   [reduce using rule 60 (binary_op)]
    FALSE_C  [reduce using rule 60 (binary_op)]
    TRUE_C   [reduce using rule 60 (binary_op)]
    FUNC     [reduce using rule 60 (binary_op)]
    VEC_T    [reduce using rule 60 (binary_op)]
    BVEC_T   [reduce using rule 60 (binary_op)]
    IVEC_T   [reduce using rule 60 (binary_op)]
    FLOAT_C  [reduce using rule 60 (binary_op)]
    INT_C    [reduce using rule 60 (binary_op)]
    ID       [reduce using rule 60 (binary_op)]
    '('      [reduce using rule 60 (binary_op)]

    type           go to state 43
    expression     go to state 91
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 67

   45 expression: expression '+' . expression
   62 binary_op: '+' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T   [reduce using rule 62 (binary_op)]
    INT_T     [reduce using rule 62 (binary_op)]
    BOOL_T    [reduce using rule 62 (binary_op)]
    FALSE_C   [reduce using rule 62 (binary_op)]
    TRUE_C    [reduce using rule 62 (binary_op)]
    FUNC      [reduce using rule 62 (binary_op)]
    VEC_T     [reduce using rule 62 (binary_op)]
    BVEC_T    [reduce using rule 62 (binary_op)]
    IVEC_T    [reduce using rule 62 (binary_op)]
    FLOAT_C   [reduce using rule 62 (binary_op)]
    INT_C     [reduce using rule 62 (binary_op)]
    ID        [reduce using rule 62 (binary_op)]
    '('       [reduce using rule 62 (binary_op)]
    $default  reduce using rule 62 (binary_op)

    type           go to state 43
    expression     go to state 92
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 68

   46 expression: expression '-' . expression
   63 binary_op: '-' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T   [reduce using rule 63 (binary_op)]
    INT_T     [reduce using rule 63 (binary_op)]
    BOOL_T    [reduce using rule 63 (binary_op)]
    FALSE_C   [reduce using rule 63 (binary_op)]
    TRUE_C    [reduce using rule 63 (binary_op)]
    FUNC      [reduce using rule 63 (binary_op)]
    VEC_T     [reduce using rule 63 (binary_op)]
    BVEC_T    [reduce using rule 63 (binary_op)]
    IVEC_T    [reduce using rule 63 (binary_op)]
    FLOAT_C   [reduce using rule 63 (binary_op)]
    INT_C     [reduce using rule 63 (binary_op)]
    ID        [reduce using rule 63 (binary_op)]
    '('       [reduce using rule 63 (binary_op)]
    $default  reduce using rule 63 (binary_op)

    type           go to state 43
    expression     go to state 93
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 69

   47 expression: expression '*' . expression
   64 binary_op: '*' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T   [reduce using rule 64 (binary_op)]
    INT_T     [reduce using rule 64 (binary_op)]
    BOOL_T    [reduce using rule 64 (binary_op)]
    FALSE_C   [reduce using rule 64 (binary_op)]
    TRUE_C    [reduce using rule 64 (binary_op)]
    FUNC      [reduce using rule 64 (binary_op)]
    VEC_T     [reduce using rule 64 (binary_op)]
    BVEC_T    [reduce using rule 64 (binary_op)]
    IVEC_T    [reduce using rule 64 (binary_op)]
    FLOAT_C   [reduce using rule 64 (binary_op)]
    INT_C     [reduce using rule 64 (binary_op)]
    ID        [reduce using rule 64 (binary_op)]
    '('       [reduce using rule 64 (binary_op)]
    $default  reduce using rule 64 (binary_op)

    type           go to state 43
    expression     go to state 94
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 70

   48 expression: expression '/' . expression
   65 binary_op: '/' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T   [reduce using rule 65 (binary_op)]
    INT_T     [reduce using rule 65 (binary_op)]
    BOOL_T    [reduce using rule 65 (binary_op)]
    FALSE_C   [reduce using rule 65 (binary_op)]
    TRUE_C    [reduce using rule 65 (binary_op)]
    FUNC      [reduce using rule 65 (binary_op)]
    VEC_T     [reduce using rule 65 (binary_op)]
    BVEC_T    [reduce using rule 65 (binary_op)]
    IVEC_T    [reduce using rule 65 (binary_op)]
    FLOAT_C   [reduce using rule 65 (binary_op)]
    INT_C     [reduce using rule 65 (binary_op)]
    ID        [reduce using rule 65 (binary_op)]
    '('       [reduce using rule 65 (binary_op)]
    $default  reduce using rule 65 (binary_op)

    type           go to state 43
    expression     go to state 95
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 71

   49 expression: expression '^' . expression
   66 binary_op: '^' .

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    FLOAT_T   [reduce using rule 66 (binary_op)]
    INT_T     [reduce using rule 66 (binary_op)]
    BOOL_T    [reduce using rule 66 (binary_op)]
    FALSE_C   [reduce using rule 66 (binary_op)]
    TRUE_C    [reduce using rule 66 (binary_op)]
    FUNC      [reduce using rule 66 (binary_op)]
    VEC_T     [reduce using rule 66 (binary_op)]
    BVEC_T    [reduce using rule 66 (binary_op)]
    IVEC_T    [reduce using rule 66 (binary_op)]
    FLOAT_C   [reduce using rule 66 (binary_op)]
    INT_C     [reduce using rule 66 (binary_op)]
    ID        [reduce using rule 66 (binary_op)]
    '('       [reduce using rule 66 (binary_op)]
    $default  reduce using rule 66 (binary_op)

    type           go to state 43
    expression     go to state 96
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 72

   12 statement: IF '(' expression ')' . statement else_statement

    IF     shift, and go to state 18
    WHILE  shift, and go to state 19
    ID     shift, and go to state 20
    '{'    shift, and go to state 1
    ';'    shift, and go to state 22

    scope      go to state 23
    statement  go to state 97
    variable   go to state 25


State 73

   31 expression: expression binary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 98
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 74

   30 expression: unary_op expression .
   31           | expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    AND       [reduce using rule 30 (expression)]
    OR        [reduce using rule 30 (expression)]
    NEQ       [reduce using rule 30 (expression)]
    EQ        [reduce using rule 30 (expression)]
    LEQ       [reduce using rule 30 (expression)]
    GEQ       [reduce using rule 30 (expression)]
    '<'       [reduce using rule 30 (expression)]
    '>'       [reduce using rule 30 (expression)]
    '+'       [reduce using rule 30 (expression)]
    '-'       [reduce using rule 30 (expression)]
    '*'       [reduce using rule 30 (expression)]
    '/'       [reduce using rule 30 (expression)]
    '^'       [reduce using rule 30 (expression)]
    $default  reduce using rule 30 (expression)

    binary_op  go to state 73


State 75

   68 function: function_name '(' . arguments_opt ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    $default  reduce using rule 71 (arguments_opt)

    type           go to state 43
    expression     go to state 82
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49
    arguments_opt  go to state 99
    arguments      go to state 100


State 76

   13 statement: WHILE '(' expression ')' . statement

    IF     shift, and go to state 18
    WHILE  shift, and go to state 19
    ID     shift, and go to state 20
    '{'    shift, and go to state 1
    ';'    shift, and go to state 22

    scope      go to state 23
    statement  go to state 101
    variable   go to state 25


State 77

   51 variable: ID '[' INT_C ']' .

    $default  reduce using rule 51 (variable)


State 78

   11 statement: variable '=' expression ';' .

    $default  reduce using rule 11 (statement)


State 79

    8 declaration: type ID '=' expression ';' .

    $default  reduce using rule 8 (declaration)


State 80

    9 declaration: CONST type ID '=' expression ';' .

    $default  reduce using rule 9 (declaration)


State 81

   34 expression: '(' expression ')' .

    $default  reduce using rule 34 (expression)


State 82

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression
   73 arguments: expression .

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    $default  reduce using rule 73 (arguments)

    binary_op  go to state 73


State 83

   67 constructor: type '(' arguments . ')'
   72 arguments: arguments . ',' expression

    ')'  shift, and go to state 102
    ','  shift, and go to state 103


State 84

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   37           | expression AND expression .
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    AND       [reduce using rule 37 (expression)]
    OR        [reduce using rule 37 (expression)]
    NEQ       [reduce using rule 37 (expression)]
    EQ        [reduce using rule 37 (expression)]
    LEQ       [reduce using rule 37 (expression)]
    GEQ       [reduce using rule 37 (expression)]
    '<'       [reduce using rule 37 (expression)]
    '>'       [reduce using rule 37 (expression)]
    '+'       [reduce using rule 37 (expression)]
    '-'       [reduce using rule 37 (expression)]
    '*'       [reduce using rule 37 (expression)]
    '/'       [reduce using rule 37 (expression)]
    '^'       [reduce using rule 37 (expression)]
    $default  reduce using rule 37 (expression)

    binary_op  go to state 73


State 85

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   38           | expression OR expression .
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    AND       [reduce using rule 38 (expression)]
    OR        [reduce using rule 38 (expression)]
    NEQ       [reduce using rule 38 (expression)]
    EQ        [reduce using rule 38 (expression)]
    LEQ       [reduce using rule 38 (expression)]
    GEQ       [reduce using rule 38 (expression)]
    '<'       [reduce using rule 38 (expression)]
    '>'       [reduce using rule 38 (expression)]
    '+'       [reduce using rule 38 (expression)]
    '-'       [reduce using rule 38 (expression)]
    '*'       [reduce using rule 38 (expression)]
    '/'       [reduce using rule 38 (expression)]
    '^'       [reduce using rule 38 (expression)]
    $default  reduce using rule 38 (expression)

    binary_op  go to state 73


State 86

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   40           | expression NEQ expression .
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    NEQ  error (nonassociative)
    LEQ  error (nonassociative)
    GEQ  error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    AND       [reduce using rule 40 (expression)]
    OR        [reduce using rule 40 (expression)]
    EQ        [reduce using rule 40 (expression)]
    $default  reduce using rule 40 (expression)

    binary_op  go to state 73


State 87

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   39           | expression EQ expression .
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    AND       [reduce using rule 39 (expression)]
    OR        [reduce using rule 39 (expression)]
    NEQ       [reduce using rule 39 (expression)]
    EQ        [reduce using rule 39 (expression)]
    LEQ       [reduce using rule 39 (expression)]
    GEQ       [reduce using rule 39 (expression)]
    '<'       [reduce using rule 39 (expression)]
    '>'       [reduce using rule 39 (expression)]
    '+'       [reduce using rule 39 (expression)]
    '-'       [reduce using rule 39 (expression)]
    '*'       [reduce using rule 39 (expression)]
    '/'       [reduce using rule 39 (expression)]
    '^'       [reduce using rule 39 (expression)]
    $default  reduce using rule 39 (expression)

    binary_op  go to state 73


State 88

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   42           | expression LEQ expression .
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    NEQ  error (nonassociative)
    LEQ  error (nonassociative)
    GEQ  error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    AND       [reduce using rule 42 (expression)]
    OR        [reduce using rule 42 (expression)]
    EQ        [reduce using rule 42 (expression)]
    $default  reduce using rule 42 (expression)

    binary_op  go to state 73


State 89

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   44           | expression GEQ expression .
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    NEQ  error (nonassociative)
    LEQ  error (nonassociative)
    GEQ  error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    AND       [reduce using rule 44 (expression)]
    OR        [reduce using rule 44 (expression)]
    EQ        [reduce using rule 44 (expression)]
    $default  reduce using rule 44 (expression)

    binary_op  go to state 73


State 90

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   41           | expression '<' expression .
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    NEQ  error (nonassociative)
    LEQ  error (nonassociative)
    GEQ  error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    AND       [reduce using rule 41 (expression)]
    OR        [reduce using rule 41 (expression)]
    EQ        [reduce using rule 41 (expression)]
    $default  reduce using rule 41 (expression)

    binary_op  go to state 73


State 91

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   43           | expression '>' expression .
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    NEQ  error (nonassociative)
    LEQ  error (nonassociative)
    GEQ  error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    AND       [reduce using rule 43 (expression)]
    OR        [reduce using rule 43 (expression)]
    EQ        [reduce using rule 43 (expression)]
    $default  reduce using rule 43 (expression)

    binary_op  go to state 73


State 92

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   45           | expression '+' expression .
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    AND       [reduce using rule 45 (expression)]
    OR        [reduce using rule 45 (expression)]
    EQ        [reduce using rule 45 (expression)]
    $default  reduce using rule 45 (expression)

    binary_op  go to state 73


State 93

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   46           | expression '-' expression .
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    AND       [reduce using rule 46 (expression)]
    OR        [reduce using rule 46 (expression)]
    EQ        [reduce using rule 46 (expression)]
    $default  reduce using rule 46 (expression)

    binary_op  go to state 73


State 94

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   47           | expression '*' expression .
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '^'  shift, and go to state 71

    AND       [reduce using rule 47 (expression)]
    OR        [reduce using rule 47 (expression)]
    EQ        [reduce using rule 47 (expression)]
    $default  reduce using rule 47 (expression)

    binary_op  go to state 73


State 95

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   48           | expression '/' expression .
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '^'  shift, and go to state 71

    AND       [reduce using rule 48 (expression)]
    OR        [reduce using rule 48 (expression)]
    EQ        [reduce using rule 48 (expression)]
    $default  reduce using rule 48 (expression)

    binary_op  go to state 73


State 96

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression
   49           | expression '^' expression .

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    EQ   shift, and go to state 62
    '^'  shift, and go to state 71

    AND       [reduce using rule 49 (expression)]
    OR        [reduce using rule 49 (expression)]
    EQ        [reduce using rule 49 (expression)]
    $default  reduce using rule 49 (expression)

    binary_op  go to state 73


State 97

   12 statement: IF '(' expression ')' statement . else_statement

    ELSE  shift, and go to state 104

    ELSE      [reduce using rule 17 (else_statement)]
    $default  reduce using rule 17 (else_statement)

    else_statement  go to state 105


State 98

   31 expression: expression . binary_op expression
   31           | expression binary_op expression .
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    AND       [reduce using rule 31 (expression)]
    OR        [reduce using rule 31 (expression)]
    NEQ       [reduce using rule 31 (expression)]
    EQ        [reduce using rule 31 (expression)]
    LEQ       [reduce using rule 31 (expression)]
    GEQ       [reduce using rule 31 (expression)]
    '<'       [reduce using rule 31 (expression)]
    '>'       [reduce using rule 31 (expression)]
    '+'       [reduce using rule 31 (expression)]
    '-'       [reduce using rule 31 (expression)]
    '*'       [reduce using rule 31 (expression)]
    '/'       [reduce using rule 31 (expression)]
    '^'       [reduce using rule 31 (expression)]
    $default  reduce using rule 31 (expression)

    binary_op  go to state 73


State 99

   68 function: function_name '(' arguments_opt . ')'

    ')'  shift, and go to state 106


State 100

   70 arguments_opt: arguments .
   72 arguments: arguments . ',' expression

    ','  shift, and go to state 103

    $default  reduce using rule 70 (arguments_opt)


State 101

   13 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 13 (statement)


State 102

   67 constructor: type '(' arguments ')' .

    $default  reduce using rule 67 (constructor)


State 103

   72 arguments: arguments ',' . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 35
    TRUE_C   shift, and go to state 36
    FUNC     shift, and go to state 37
    VEC_T    shift, and go to state 11
    BVEC_T   shift, and go to state 12
    IVEC_T   shift, and go to state 13
    FLOAT_C  shift, and go to state 38
    INT_C    shift, and go to state 39
    ID       shift, and go to state 20
    '-'      shift, and go to state 40
    '!'      shift, and go to state 41
    '('      shift, and go to state 42

    type           go to state 43
    expression     go to state 107
    variable       go to state 45
    unary_op       go to state 46
    constructor    go to state 47
    function       go to state 48
    function_name  go to state 49


State 104

   16 else_statement: ELSE . statement

    IF     shift, and go to state 18
    WHILE  shift, and go to state 19
    ID     shift, and go to state 20
    '{'    shift, and go to state 1
    ';'    shift, and go to state 22

    scope      go to state 23
    statement  go to state 108
    variable   go to state 25


State 105

   12 statement: IF '(' expression ')' statement else_statement .

    $default  reduce using rule 12 (statement)


State 106

   68 function: function_name '(' arguments_opt ')' .

    $default  reduce using rule 68 (function)


State 107

   31 expression: expression . binary_op expression
   37           | expression . AND expression
   38           | expression . OR expression
   39           | expression . EQ expression
   40           | expression . NEQ expression
   41           | expression . '<' expression
   42           | expression . LEQ expression
   43           | expression . '>' expression
   44           | expression . GEQ expression
   45           | expression . '+' expression
   46           | expression . '-' expression
   47           | expression . '*' expression
   48           | expression . '/' expression
   49           | expression . '^' expression
   72 arguments: arguments ',' expression .

    AND  shift, and go to state 59
    OR   shift, and go to state 60
    NEQ  shift, and go to state 61
    EQ   shift, and go to state 62
    LEQ  shift, and go to state 63
    GEQ  shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 67
    '-'  shift, and go to state 68
    '*'  shift, and go to state 69
    '/'  shift, and go to state 70
    '^'  shift, and go to state 71

    $default  reduce using rule 72 (arguments)

    binary_op  go to state 73


State 108

   16 else_statement: ELSE statement .

    $default  reduce using rule 16 (else_statement)
